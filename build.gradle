buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "ForgeFS"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}


/*plugins {
    id "com.matthewprenger.cursegradle" version "1.0.5"
}*/

apply plugin: "maven"
apply plugin: "forge"

repositories {
    mavenLocal()
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    ivy {
        name 'Forge FS legacy'
        artifactPattern "http://files.minecraftforge.net/[module]/[module]-dev-[revision].[ext]"
    }
}

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

group = "com.github.glitchfiend.biomesoplenty"
version = config.mod_version
archivesBaseName = "BiomesOPlenty"

// java version
sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = config.minecraft_version + "-" + config.forge_version // grab latest forge
}

// add some stuff to the version
version = "${config.minecraft_version}-${config.mod_version}.${System.getenv().BUILD_NUMBER}"

dependencies
{
	compile fileTree(dir: "libs", include: "*.jar")
}

processResources {
    // replace stuff in the files we want.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replaces
        expand ([
            'modid': project.archivesBaseName,
            'mod_version': project.config.mod_version,
            'minecraft_version': project.config.minecraft_version,
            'build_number': project.config.build_number,
            'worldcore_version': project.config.worldcore_version
        ])
    }

    // copy everything else, thats we didnt do before
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {
    classifier = 'universal'
}

import net.minecraftforge.gradle.tasks.dev.ChangelogTask
import net.minecraftforge.gradle.common.Constants
import net.minecraftforge.gradle.delayed.*

task createChangelog(type: ChangelogTask) {
    def jobName = "${System.getenv().JOB_NAME}"
    def buildNumber = "${System.getenv().BUILD_NUMBER}"

    setServerRoot(new DelayedString(project, 'http://ci.jenkins.minecraftforge.net/'))
    setJobName(new DelayedString(project, jobName.toString()));
    setAuthName(new DelayedString(project, 'console_script'));
    setAuthPassword(new DelayedString(project, 'dc6d48ca20a474beeac280a9a16a926e'));
    setTargetBuild({buildNumber.toString()});
    setOutput(new DelayedFile(project, 'build/libs/' + project.getName() + '-' + project.version + '-changelog.txt'));
}

//tasks.build.dependsOn('createChangelog')

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

/*curseforge {
    apiKey = "$System.env.curse_api_key"
    project {
        id = '220318'
        changelog = file('build/libs/' + project.getName() + '-' + project.version + '-changelog.txt');
        releaseType = 'beta'
    }
}*/

/*uploadArchives {
    repositories {
        mavenDeployer {
			if (project.hasProperty('forgeMavenPassword'))
			{
				repository(url: "http://files.minecraftforge.net/maven/manage/upload") {
					authentication(userName: project.getProperty('forgeMavenUsername'), password: project.getProperty('forgeMavenPassword'))
				}
			}
			else
			{
				// local repo folder. Might wanna juset use  gradle install   if you wanans end it to maven-local
				repository(url: 'file://localhost/' + project.file('repo').getAbsolutePath())
			}

            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description 'Biomes O Plenty'
                    url 'https://github.com/Glitchfiend/BiomesOPlenty'
                
                    scm {
                        url 'https://github.com/Glitchfiend/BiomesOPlenty'
                        connection 'scm:git:git://github.com/Glitchfiend/BiomesOPlenty.git'
                        developerConnection 'scm:git:git@github.com:Glitchfiend/BiomesOPlenty.git'
                    }
                
                    issueManagement {
                        system 'github'
                        url 'https://github.com/Glitchfiend/BiomesOPlenty/issues'
                    }
                
                    licenses {
                        license {
                            name 'Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International Public License'
                            url 'http://creativecommons.org/licenses/by-nc-nd/4.0/'
                            distribution 'repo'
                        }
                    }
                
                    developers {
                        developer {
                            id 'Adubbz'
                            name 'Adubbz'
                            roles { role 'developer' }
                        }
                        developer {
                            id 'Amnet'
                            name 'Amnet'
                            roles { role 'developer' }
                        }
                        developer {
                            id 'Forstride'
                            name 'Forstride'
                            roles { role 'developer' }
                        }
                        developer {
                            id 'ted80'
                            name 'ted80'
                            roles { role 'developer' }
                        }
                    }
                }
            }
		}
	}
}*/